---
description: 
globs: src\lib\pixi-games\multiple-choice\*
alwaysApply: false
---
Always keep the gameflow in mind. You can access any file listed here:

# Multiple Choice Game Flow

This document outlines the sequence of events and component interactions when a user plays the Multiple Choice game.

## 1. Initial Navigation & Page Load

1.  **User Action:** The user navigates to a URL like `/games/[quizId]/multiple-choice`.
2.  **Next.js Routing:** The framework routes the request to `src/app/games/[quizId]/[gameSlug]/page.tsx`.
3.  **Page Component (`page.tsx`):**
    *   Extracts `quizId` and `gameSlug` from the URL.
    *   Renders the `GameContainer` component, passing the extracted IDs.

## 2. Game Container Setup

1.  **Component Load (`GameContainer.tsx`):**
    *   Receives `quizId` and `gameSlug`.
    *   Potentially performs initial setup or configuration based on the game type ('multiple-choice').
    *   Renders the `GameplayView` component, passing necessary props (like the configuration).

## 3. Gameplay View Initialization

1.  **Component Mount (`GameplayView.tsx`):**
    *   This React component manages the main game interaction area.
    *   **Action:** Instantiates the core PixiJS game logic class: `new MultipleChoiceGame(config)`.
    *   **Action:** Calls the `init()` method on the created `gameInstance`.
    *   **Action:** Sets up event listeners to react to events emitted by the `gameInstance` (e.g., `SCORE_UPDATED`, `GAME_OVER`).
    *   **DOM:** Renders a `div` element that will serve as the container for the PixiJS canvas.

## 4. Pixi Game Initialization (`MultipleChoiceGame.init()`)

*This happens *inside* the PixiJS world, orchestrated by the `MultipleChoiceGame` class.*

1.  **Engine Setup:** Initializes the `PixiEngine` and the core PixiJS Application.
2.  **Canvas Attachment:** Gets the PixiJS canvas (`view`) and appends it to the `div` rendered by `GameplayView`.
3.  **Data Fetching:** Makes an API call (e.g., to `/api/quizzes/[quizId]`) to retrieve the questions and answers for the specific quiz.
4.  **Asset Preloading:** Identifies any image URLs within the fetched question data and uses `PIXI.Assets.load()` to preload them for smooth display later.
5.  **Internal UI Creation:** Creates PixiJS-specific UI elements like the `QuestionScene` (to display text/images) and the `PixiTimer`. Adds these to the PixiJS stage.
6.  **Font Loading:** Ensures necessary fonts (e.g., 'Grandstander') are loaded before attempting to render text.
7.  **Start Game:** Calls its own internal `showQuestion(0)` method to display the first question from the loaded data.

## 5. Displaying a Question (`MultipleChoiceGame.showQuestion()`)

*This method is called for the first question and subsequent questions.*

1.  **Scene Update:** Updates the `QuestionScene` with the current question's text and image URL.
2.  **Button Creation:** Dynamically creates interactive answer buttons (using `@pixi/ui` or `PIXI.Graphics`) based on the options for the current question. Adds these buttons to the `QuestionScene`.
3.  **Timer Start:** Resets and starts the `PixiTimer` for the configured duration for that question.

## 6. Core Gameplay Loop (Interaction or Timeout)

*The game now waits for one of two events:*

*   **Event A: User Clicks an Answer Button**
    1.  **Trigger:** `handleAnswerSelected()` method is called in `MultipleChoiceGame`.
    2.  **Action:** The `PixiTimer` is immediately stopped.
    3.  **Logic:** Determines if the selected answer is correct.
    4.  **Score Update (If Correct):**
        *   Increments the score for the currently active team/player.
        *   **Action:** Emits a `SCORE_UPDATED` event with the new scores payload.
        *   **Reaction (`GameplayView`):** Listens for `SCORE_UPDATED`, receives the payload, and updates its React state to re-render any score display components (like `PlayerScore.tsx`).
    5.  **Turn Advancement:** Updates the `activeTeamIndex` to the next team.
    6.  **Feedback:** Visually highlights the correct and incorrect answer buttons within the PixiJS canvas.
    7.  **Transition:** After a short delay (e.g., 1.5 seconds) to show feedback:
        *   Checks if it was the last question.
        *   If yes, calls `triggerGameOver()`.
        *   If no, increments the `currentQuestionIndex` and calls `showQuestion()` again to display the next question.

*   **Event B: Timer Runs Out**
    1.  **Trigger:** `handleTimerComplete()` method is called in `MultipleChoiceGame`.
    2.  **Action:** The `PixiTimer` is stopped.
    3.  **Score Update:** No points are awarded.
    4.  **Turn Advancement:** Updates the `activeTeamIndex` to the next team.
    5.  **Feedback:** Visually indicates that time ran out (e.g., highlights the correct answer differently).
    6.  **Transition:** After a short delay:
        *   Checks if it was the last question.
        *   If yes, calls `triggerGameOver()`.
        *   If no, increments the `currentQuestionIndex` and calls `showQuestion()` again.

## 7. Game Over Sequence

1.  **Trigger:** `triggerGameOver()` method is called in `MultipleChoiceGame` (either after the last question is answered or times out).
2.  **State Update:** Sets internal flags (`isGameOver`, `_hasTriggeredGameOver`) to prevent duplicate processing.
3.  **Cleanup:** Stops the timer and disables answer buttons permanently.
4.  **Final Scores:** Calculates the final scores and determines the winner (if any).
5.  **Event Emission:**
    *   **Action:** Emits the `GAME_OVER` event with the final scores and winner payload.
    *   **Reaction (`GameplayView`):** Listens for `GAME_OVER`, receives the payload, and updates its React state (`isGameOver = true`, stores final scores).
6.  **Pixi Scene Cleanup:** Removes or hides elements from the PixiJS `QuestionScene` (like answer buttons).
7.  **React UI Update (`GameplayView`):** Based on the `isGameOver` state being true, it conditionally renders the React component `GameOverScreen.tsx`, passing the final scores to it for display.

## 8. Cleanup on Exit

1.  **User Action:** The user navigates away from the game page, or the `GameplayView` component is otherwise unmounted.
2.  **React Lifecycle:** The `useEffect` cleanup function in `GameplayView` runs.
3.  **Action:** Calls `gameInstance.destroy()` on the `MultipleChoiceGame` object.
4.  **Pixi Cleanup (`MultipleChoiceGame.destroy()`):**
    *   Stops the PixiJS ticker.
    *   Destroys the PixiJS Application (`app.destroy(true)`), removing the canvas and freeing WebGL resources.
    *   Unloads any assets loaded via `PIXI.Assets`.
    *   Removes all event listeners set up by the game class.

